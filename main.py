import math
import re
import sqlite3

import cursor as cursor
import telebot
from _sqlite3 import Error
from aiogram import types
from telebot import types

bot = telebot.TeleBot('')

last_library_message = None

page = 0
content = 5

pattern = re.compile(r'\w', re.MULTILINE)


@bot.inline_handler(func=lambda query: len(query.query) > 0)
def show_list(query):
    try:
        matches = re.match(pattern, query.query)
        # –í—ã–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —é–∑–µ—Ä –≤–≤—ë–ª —á—É—à—å
        # –∏–ª–∏ –∑–∞–¥—É–º–∞–ª—Å—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞
    except AttributeError as ex:
        return
    results = []
    id = 0
    for name in definitions:
        if name[0] == query.query:
            results.append(
                types.InlineQueryResultArticle(
                    id=str(id), title=name[0],
                    description=name[1],
                    input_message_content=types.InputTextMessageContent(message_text="works"))
            )
            id += 1
    bot.answer_inline_query(query.id, results, cache_time=1)


def on_last_page():
    if page == 0 and number_of_definitions <= content:
        return True
    elif (math.ceil(number_of_definitions / content) - 1) == page:
        return True
    else:
        return False


# check_name checks if the given name in names of definitions`
def check_name(name):
    for definition in definitions:
        if definition[0] == name:
            return True
    return False


# returns description of the definition
def get_description(name):
    for definition in definitions:
        if definition[0] == name:
            return definition[1]
    return 'No description yet('


@bot.callback_query_handler(func=lambda call: check_name(call.data))
def show_definition(call):
    message = 'üî∏ ' + call.data + '\n\nüìñ ' + get_description(call.data) + '\n\nüåê Development Corporation ‚Ñ¢'
    bot.send_message(call.message.chat.id, message)
    bot.answer_callback_query(call.id, text=call.data)


# check_menu checks if the given text is menu or left/right button
def check_menu(text):
    if text == 'menu' or text == 'prev' or text == 'next':
        return True
    else:
        return False


# outputs main menu
@bot.callback_query_handler(func=lambda call: check_menu(call.data))
def return_to_menu(call):
    if call.data == 'menu':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        start(call.message)
    elif call.data == 'prev':
        to_prev_page(call.message)
    elif call.data == 'next':
        to_next_page(call.message)
    bot.answer_callback_query(call.id, text='menu')


@bot.message_handler(commands=["start"])
def start(message):
    send_mess = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name} {message.from_user.last_name}!\n' \
                f'–î–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –≤–∞—à–µ –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏!\n' \
                f'/library - –∫–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ\n' \
                f'/help - –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n' \
                f'/start - –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞\n' \
                f'–ù–∞ —ç—Ç–æ–º –ø–æ–∫–∞ —á—Ç–æ –≤—Å—ë, —Ç–∞–∫ —á—Ç–æ —É–¥–∞—á–∏ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row_width = 2
    btn1 = types.KeyboardButton("üìö –¢–ï–†–ú–ò–ù–´ üìö")
    btn2 = types.KeyboardButton("üìà –§–ò–ì–£–†–´ üìâ")
    btn3 = types.KeyboardButton("üóû –ù–û–í–û–°–¢–ò üóû")
    btn4 = types.KeyboardButton("‚ö° START ‚ö°")

    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, send_mess, reply_markup=markup)


# rewrite if possible
def refresh_page():
    global page
    name = 'ads'
    names_on_page = types.InlineKeyboardMarkup(row_width=1)
    for i in range(page * content, content * (page + 1)):
        name = definitions[i][0]
        button = types.InlineKeyboardButton(name, callback_data=name)
        names_on_page.add(button)
    names_on_page.row_width = 3
    if page != 0 and not on_last_page():
        prev_page = types.InlineKeyboardButton('‚¨Ö', callback_data='prev')
        menu = types.InlineKeyboardButton('Menu', callback_data='menu')
        next_page = types.InlineKeyboardButton('‚û°', callback_data='next')
        names_on_page.add(prev_page, menu, next_page)
    elif page == 0:
        menu = types.InlineKeyboardButton('Menu', callback_data='menu')
        next_page = types.InlineKeyboardButton('‚û°', callback_data='next')
        names_on_page.add(menu, next_page)
    elif on_last_page():
        menu = types.InlineKeyboardButton('Menu', callback_data='menu')
        prev_page = types.InlineKeyboardButton('‚¨Ö', callback_data='prev')
        names_on_page.add(prev_page, menu)
    else:
        menu = types.InlineKeyboardButton('Menu', callback_data='menu')
        return menu
    return names_on_page


def print_curr_page(message):
    global last_library_message
    try:
        bot.delete_message(chat_id=last_library_message.chat.id, message_id=last_library_message.message_id)
    except Exception:
        print('No such chat exists')
    last_library_message = bot.send_message(chat_id=message.chat.id, text='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞',
                                            reply_markup=refresh_page())


def update_curr_page(message):
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞',
                          reply_markup=refresh_page())


def to_next_page(message):
    global page
    page += 1
    update_curr_page(message)


def to_prev_page(message):
    global page
    page -= 1
    update_curr_page(message)


# outputs the whole library
@bot.message_handler(commands=["library"])
def libsearch(message):
    print_curr_page(message)


@bot.message_handler(commands=["help"])
def help(message):
    send_mess = f'–ü–æ—Ö–æ–∂–µ, –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏–ª–∞—Å—å –ø–æ–º–æ—â—å, —Ç–∞–∫ —á—Ç–æ –¥–µ—Ä–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n' \
                f'/libsearch - –∫–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ\n' \
                f'/help - –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n' \
                f'/start - –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞\n' \
                f'–ù–∞ —ç—Ç–æ–º –ø–æ–∫–∞ —á—Ç–æ –≤—Å—ë, —Ç–∞–∫ —á—Ç–æ —É–¥–∞—á–∏ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!'
    bot.send_message(message.chat.id, send_mess, parse_mode='html')


@bot.message_handler(content_types=['text'])
def main_menu(message):
    if message.text == "üìö –¢–ï–†–ú–ò–ù–´ üìö":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üßë‚Äçüéì –û–ë–£–ß–ï–ù–ò–ï üë©‚Äçüéì")
        btn2 = types.KeyboardButton("üßë‚Äçüíª –ü–†–û–í–ï–†–¨ –°–ï–ë–Ø üë©‚Äçüíª")
        btn3 = types.KeyboardButton("üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø üìã")
        btn4 = types.KeyboardButton("üîÑ RESTART üîÑ")

        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)
    elif message.text == "üìà –§–ò–ì–£–†–´ üìâ":
        bot.send_message(message.chat.id, '—Ñ–∏–≥—É—Ä—ã', parse_mode='html')
    elif message.text == "üóû –ù–û–í–û–°–¢–ò üóû":
        bot.send_message(message.chat.id, '–Ω–æ–≤–æ—Å—Ç–∏', parse_mode='html')
    elif message.text == "üßë‚Äçüíª –ü–†–û–í–ï–†–¨ –°–ï–ë–Ø üë©‚Äçüíª":
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', parse_mode='html')
    elif message.text == "üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø üìã":
        bot.send_message(message.chat.id, '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', parse_mode='html')
    elif message.text == "‚ö° START ‚ö°":
        bot.send_message(message.chat.id, '/start', parse_mode='html')
    elif message.text == "üßë‚Äçüéì –û–ë–£–ß–ï–ù–ò–ï üë©‚Äçüéì":
        libsearch(message)
    elif message.text == "üîÑ RESTART üîÑ":
        start(message)


def create_connection(path):
    connection = None
    try:
        connection = sqlite3.connect(path)
        print("Connection to SQLite DB successful")
    except Error as e:
        print(f"The error '{e}' occurred")

    return connection


def execute_query(connection, query):
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        connection.commit()
        print("Query executed successfully")
    except Error as e:
        print(f"The error '{e}' occurred")


def execute_read_query(connection, query):
    cursor = connection.cursor()
    result = None
    try:
        cursor.execute(query)
        result = cursor.fetchall()
        return result
    except Error as e:
        print(f"The error '{e}' occurred")


connection = create_connection('db.sqlite')

create_definitions_table = """
CREATE TABLE IF NOT EXISTS definitions (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  description TEXT
);
"""

create_defs = """
INSERT INTO
  definitions (name, description)
VALUES
  ('–§–µ—Ä–º–∞', '–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –≤ –æ–¥–Ω—É —Å–µ—Ç—å'),
  ('–¢–µ–ª–æ —Å–≤–µ—á–∏', '—Ç–µ—Ä–º–∏–Ω, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É —Ü–µ–Ω–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'),
  ('–¢–µ–Ω—å —Å–≤–µ—á–∏', '–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ'),
  ('–°–∞—Ç–æ—à–∏ –ù–∞–∫–∞–º–æ—Ç–æ', '–ø—Å–µ–≤–¥–æ–Ω–∏–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–µ—Ä–≤–æ–π –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –±–∏—Ç–∫–æ–∏–Ω'),
  ('–†–∞–∑–≤–æ—Ä–æ—Ç', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É'),
  ('–ì–∞–∑', '–∫–æ–º–∏—Å—Å–∏—è –º–∞–π–Ω–µ—Ä–∞–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ—Ç–∏ –≠—Ñ–∏—Ä–µ'),
  ('–í—Ç–æ—Ä–∏—á–∫–∞', '–ø–æ–∫—É–ø–∫–∞ NFT –∏–∑ –≤—Ç–æ—Ä—ã—Ö —Ä—É–∫ –≤ –º–µ—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ'),
  ('–õ–∏—Å—Ç–∏–Ω–≥', '–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ NFT –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ'),
  ('–î–µ–ª–∏—Å—Ç–∏–Ω–≥', '—Å–Ω—è—Ç–∏–µ NFT —Å –ø—Ä–æ–¥–∞–∂–∏'),
  ('–†–∞—Ä, —Ä–∞—Ä–Ω–æ—Å—Ç—å', '—Å—Ç–µ–ø–µ–Ω—å —Ä–µ–¥–∫–æ—Å—Ç–∏ NFT –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ß–µ–º —Ä–µ–∂–µ NFT, —Ç–µ–º –æ–Ω–∞ –¥–æ—Ä–æ–∂–µ'),
  ('–ú–∏–Ω—Ç', '–ø–æ–∫—É–ø–∫–∞ NFT –Ω–∞ —Å–∞–π—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏'),
  ('–í–∞–π—Ç –ª–∏—Å—Ç', '—Å–ø–∏—Å–æ–∫ —á–µ–ª–æ–≤–µ–∫, –∏–º–µ—é—â–∏—Ö –ø—Ä–∞–≤–æ –Ω–∞ –º–∏–Ω—Ç NFT –≤ —á–∏—Å–ª–µ –ø–µ—Ä–≤—ã—Ö'),
  ('–ü–∞–±–ª–∏–∫ —Å–µ–π–ª', '–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö'),
  ('–†–µ–≤–∏–ª', '–æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–∞—à–µ–≥–æ NFT. –ü–æ—á—Ç–∏ –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–∫—Ä—ã—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–ª–∏–≤–∞ –≤ –ø–µ—Ä–≤—ã–µ –¥–Ω–∏ –ª–∏—Å—Ç–∏–Ω–≥–∞'),
  ('—Ö–æ–ª–¥', '—Ö—Ä–∞–Ω–µ–Ω–∏–µ NFT –≤ –¥–æ–ª–≥–æ—Å—Ä–æ–∫');
"""

# Created_table = execute_read_query(connection, create_definitions_table)
Inserted_values = execute_read_query(connection, create_defs)

select_definitions = 'SELECT name, description from definitions'
select_number_of_definitions = 'SELECT COUNT(name) from definitions'

definitions = execute_read_query(connection, select_definitions)
number_of_definitions = execute_read_query(connection, select_number_of_definitions)[0][0]
delete_comment = "DELETE FROM definitions WHERE id = 1"

bot.polling(none_stop=True, interval=0)
